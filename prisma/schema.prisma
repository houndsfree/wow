//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
model User {
  id                     String               @id() @default(uuid())
  name                   String?
  email                  String?              @unique()
  pictureUrl             String?
  stripeCustomerId       String?
  /// @password
  /// @omit
  password               String?
  dateCreated            DateTime             @default(now())
  dateUpdated            DateTime             @default(now()) @updatedAt()
  accounts               Account[]
  sessions               Session[]
  roles                  Role[]
  organizationsAsOwner   Organization[]       @relation("owner")
  organizationMembers    OrganizationMember[] @relation("user")
  workOrdersAsAssignedTo WorkOrder[]          @relation("assignedTo")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Organization {
  id                  String               @id() @default(uuid())
  name                String?
  ownerId             String?
  owner               User?                @relation(fields: [ownerId], references: [id], name: "owner")
  organizationMembers OrganizationMember[] @relation("organization")
  masterTemplates     MasterTemplate[]     @relation("organization")
  warehouses          Warehouse[]          @relation("organization")
  purchaseOrders      PurchaseOrder[]      @relation("organization")
  workOrders          WorkOrder[]          @relation("organization")
  dateCreated         DateTime             @default(now())
  dateUpdated         DateTime             @default(now()) @updatedAt()
}

/// @@allow('all', true)
model OrganizationMember {
  id             String        @id() @default(uuid())
  role           String?
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model MasterTemplate {
  id                 String              @id() @default(uuid())
  name               String?
  description        String?
  organizationId     String?
  organization       Organization?       @relation(fields: [organizationId], references: [id], name: "organization")
  templateLabels     TemplateLabel[]     @relation("masterTemplate")
  purchaseOrderItems PurchaseOrderItem[] @relation("masterTemplate")
  stockItems         StockItem[]         @relation("masterTemplate")
  dateCreated        DateTime            @default(now())
  dateUpdated        DateTime            @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TemplateLabel {
  id               String          @id() @default(uuid())
  label            String?
  masterTemplateId String?
  masterTemplate   MasterTemplate? @relation(fields: [masterTemplateId], references: [id], name: "masterTemplate")
  dateCreated      DateTime        @default(now())
  dateUpdated      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PurchaseOrderItem {
  id               String          @id() @default(uuid())
  quantity         Float?
  status           String?
  purchaseOrderId  String?
  purchaseOrder    PurchaseOrder?  @relation(fields: [purchaseOrderId], references: [id], name: "purchaseOrder")
  masterTemplateId String?
  masterTemplate   MasterTemplate? @relation(fields: [masterTemplateId], references: [id], name: "masterTemplate")
  dateCreated      DateTime        @default(now())
  dateUpdated      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PurchaseOrder {
  id                 String              @id() @default(uuid())
  status             String?
  organizationId     String?
  organization       Organization?       @relation(fields: [organizationId], references: [id], name: "organization")
  warehouseId        String?
  warehouse          Warehouse?          @relation(fields: [warehouseId], references: [id], name: "warehouse")
  purchaseOrderItems PurchaseOrderItem[] @relation("purchaseOrder")
  dateCreated        DateTime            @default(now())
  dateUpdated        DateTime            @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Warehouse {
  id             String          @id() @default(uuid())
  name           String?
  location       String?
  organizationId String?
  organization   Organization?   @relation(fields: [organizationId], references: [id], name: "organization")
  purchaseOrders PurchaseOrder[] @relation("warehouse")
  stockItems     StockItem[]     @relation("warehouse")
  dateCreated    DateTime        @default(now())
  dateUpdated    DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model StockItem {
  id               String          @id() @default(uuid())
  imei             String?
  quantity         Float?
  warehouseId      String?
  warehouse        Warehouse?      @relation(fields: [warehouseId], references: [id], name: "warehouse")
  masterTemplateId String?
  masterTemplate   MasterTemplate? @relation(fields: [masterTemplateId], references: [id], name: "masterTemplate")
  dateCreated      DateTime        @default(now())
  dateUpdated      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model WorkOrder {
  id             String        @id() @default(uuid())
  description    String?
  status         String?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  assignedToId   String?
  assignedTo     User?         @relation(fields: [assignedToId], references: [id], name: "assignedTo")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id           String @id() @default(uuid())
  vectorId     String
  argsJson     Bytes?
  docstoreJson Bytes?
  hnswlibIndex Bytes?
}
